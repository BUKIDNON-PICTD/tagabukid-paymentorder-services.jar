import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

public class BUKPayOrderOfflineService extends ActiveCrudListService
{
	@ActiveDB(value='bukpayorder', em='plugtreasury')
	def em;

	@ActiveDB(value='bukpayorder', em='system')
	def emsequence;


	@ActiveDB('bukpayorder')
	def xem;

	@ActiveDB(value='bukpayorder',em='main')
	def emmain 

	@Service('SequenceService')
	def seqSvc

	@Service('ReportParameterService')
	def rpsvc

	@Service('DateService')
	def dtSvc

	@Env
	def env; 

	@ProxyMethod
	public def init(){
		def entity = [:];
		entity.state = "CLOSED"
		entity.txndate = dtSvc.serverDate
		entity.expdate = dtSvc.serverDate + 1
		//entity.ordernum = dtSvc.getServerYear() +"-"+ "OFF" + seqSvc.getNextSeries('payorderoffline' + dtSvc.getServerYear()) ;
		entity.assessedby = env.USERID
		entity.assessedbyname = env.FULLNAME
		entity.ordertype='MISC'
		entity.items = []
		return entity;
	}

	public def getCurrentSeries( objid )  {
		def seq = emsequence.findCurrentSeries([ objid: objid ]); 
		if ( seq ) {
			return seq.currentSeries; 
		} else {
			seq = seqSvc.create( objid ); 
			return seq.nextSeries; 
		} 
	}

	@ProxyMethod
	public def getColumns(params){
		return [
			[name:'paidby', caption:'Payee'],
			[name:'paidbyaddress', caption:'Address'],
			[name:'amountdue', caption:'Amount Due'],
			[name:'state', caption:'State'],
			[name:'txndate', caption:'Date'],
			[name:'ordernum', caption:'Order #'],
			[name:'receiptno', caption:'OR No.'],
		]
	}


	void savePayorderitems(payorder){
		payorder.items.each{			/*loop ni, equivalent sa for loop */
			em.save(it, 'item');
		}
	}


	public void afterOpen(payorder){
		println payorder
		payorder.items = getItems(payorder)
	}

	void beforeCreate(payorder){
		// payorder.state = "CLOSED"
		// payorder.txndate = dtSvc.serverDate
		// payorder.expdate = dtSvc.serverDate + 1
		 payorder.ordernum = dtSvc.getServerYear() +"-"+ "OFF" + seqSvc.getNextFormattedSeries('payorderoffline' + dtSvc.getServerYear()) ;
		// payorder.assessedby = env.USERID
		// payorder.assessedbyname = env.FULLNAME
	}

	void afterCreate(payorder){
		println payorder.receiptno.length()

		if (payorder.receiptno.length() != 7){
			throw new Exception ("The Receipt Number must be 7 digits only")
		}

		def rn = em.getValidReceiptno(payorder)
		if (!rn.receiptno){
			throw new Exception ("This Receipt Number does not exist in the Main database")
		}

		savePayorderitems(payorder);
		// def checkreceiptno = em.getReceiptNo(payorder);
		// println "TEST" * 50
		// println checkreceiptno
		// println checkreceiptno.size()
		// if (checkreceiptno){
		// 	throw new Exception ("Receipt Number already exists")
		// }else{
		// 	savePayorderitems(payorder);
		// }
	}

	def validateBeforeSave(payorder){

		return em.getReceiptNo(payorder);
	}

	void afterUpdate(payorder){
		savePayorderitems(payorder);
	}

	void afterList(params,o){
		//println "TEST"
		//def filter = "receiptid IN ('" + o.receiptid.join("','") + "')";
		//def voidedReceipt = emmain.getVoidedReceipt([filter:filter])
		//println voidedReceipt
		//voidedReceipt.each{ y ->
		//	o.find{ it.receiptid == y.receiptid }.state = "VOIDED"
		//}
		//o.find{it.expdate < dtSvc.serverDate || state == "DRAFT"}.state = "EXPIRED"
	}	

	
}